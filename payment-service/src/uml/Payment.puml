@startuml

actor User
participant PaymentController
participant PaymentServiceImpl
participant PaymentRepository
participant TransportService
participant ParkingSlotService

User -> PaymentController: createPayment(Payment)
activate PaymentController
activate User
PaymentController -> PaymentServiceImpl: createPayment(Payment)
activate PaymentServiceImpl

PaymentServiceImpl -> TransportService: getTransportName(payment.getTransportId())
activate TransportService
TransportService -> PaymentServiceImpl: transportName
deactivate TransportService

PaymentServiceImpl -> TransportService: getTransportType(payment.getTransportId())
activate TransportService
TransportService -> PaymentServiceImpl: transportType
deactivate TransportService

PaymentServiceImpl -> ParkingSlotService: getSlotName(payment.getSlotId())
activate ParkingSlotService
ParkingSlotService -> PaymentServiceImpl: slotName
deactivate ParkingSlotService

PaymentServiceImpl -> ParkingSlotService: getSlotAvailability(payment.getSlotId())
activate ParkingSlotService
ParkingSlotService -> PaymentServiceImpl: slotAvailability
deactivate ParkingSlotService

alt Slot available
    PaymentServiceImpl -> PaymentServiceImpl: calculatePrice(transportType)
    PaymentServiceImpl -> PaymentServiceImpl: updateAvailability(slotId)

    PaymentServiceImpl -> PaymentRepository: save(Payment)
    activate PaymentRepository
    PaymentRepository -> PaymentServiceImpl: Payment saved
    deactivate PaymentRepository

    PaymentServiceImpl -> PaymentController: Payment created
else Slot not available
    PaymentServiceImpl --> PaymentController: Slot Not Available
    deactivate PaymentServiceImpl
end

PaymentController -> User: Payment created or Slot Not Available
deactivate PaymentController

User -> PaymentController: getAllPayments()
activate PaymentController
PaymentController -> PaymentServiceImpl: getAllPayments()
activate PaymentServiceImpl
PaymentServiceImpl -> PaymentRepository: findAll()
activate PaymentRepository
PaymentRepository -> PaymentServiceImpl: List of Payments
deactivate PaymentRepository
PaymentServiceImpl -> PaymentController: List of Payments
deactivate PaymentServiceImpl
PaymentController -> User: List of Payments
deactivate PaymentController

User -> PaymentController: getPaymentById(id)
activate PaymentController
alt Payment exists
    PaymentController -> PaymentServiceImpl: getPaymentById(id)
    activate PaymentServiceImpl
    PaymentServiceImpl -> PaymentRepository: findById(id)
    activate PaymentRepository
    PaymentRepository -> PaymentServiceImpl: Optional<Payment>
    deactivate PaymentRepository
    PaymentServiceImpl -> PaymentController: Optional<Payment>
    deactivate PaymentServiceImpl
    PaymentController -> User: Payment (if found)
else Payment not found
    PaymentController --> User: Payment Not Found
    deactivate PaymentController
    deactivate User
end

@enduml
