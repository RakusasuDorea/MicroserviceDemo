@startuml
actor User
box "Payment Service" #LightBlue
    participant PaymentController
    participant PaymentServiceImpl
    participant PaymentRepository
end box

box "External Services"
    participant TransportService
    participant ParkingSlotService
end box

User -> PaymentController: createPayment(Payment)
activate PaymentController
PaymentController -> PaymentServiceImpl: createPayment(Payment)
activate PaymentServiceImpl

PaymentServiceImpl -> TransportService: getTransportById(payment.getTransportId())
activate TransportService
TransportService -> PaymentServiceImpl: Transport (including name and type)
deactivate TransportService

PaymentServiceImpl -> ParkingSlotService: getSlotById(payment.getSlotId())
activate ParkingSlotService
ParkingSlotService -> PaymentServiceImpl: ParkingSlot (including name and availability)
deactivate ParkingSlotService

alt Slot available
    PaymentServiceImpl -> PaymentServiceImpl: calculatePrice(transport.getType())
    PaymentServiceImpl -> ParkingSlotService: updateSlotAvailabilityFalse(slotId)
    activate ParkingSlotService
    ParkingSlotService -> PaymentServiceImpl: Slot updated
    deactivate ParkingSlotService

    PaymentServiceImpl -> PaymentRepository: save(Payment)
    activate PaymentRepository
    PaymentRepository -> PaymentServiceImpl: Payment saved
    deactivate PaymentRepository

    PaymentServiceImpl -> PaymentController: Payment created
else Slot not available
    PaymentServiceImpl --> PaymentController: Slot Not Available
end
deactivate PaymentServiceImpl

PaymentController -> User: Payment created or Slot Not Available
deactivate PaymentController

User -> PaymentController: getAllPayments()
activate PaymentController
PaymentController -> PaymentServiceImpl: getAllPayments()
activate PaymentServiceImpl
PaymentServiceImpl -> PaymentRepository: findAll()
activate PaymentRepository
PaymentRepository -> PaymentServiceImpl: List of Payments
deactivate PaymentRepository
PaymentServiceImpl -> PaymentController: List of Payments
deactivate PaymentServiceImpl
PaymentController -> User: List of Payments
deactivate PaymentController

User -> PaymentController: getPaymentById(id)
activate PaymentController
alt Payment exists
    PaymentController -> PaymentServiceImpl: getPaymentById(id)
    activate PaymentServiceImpl
    PaymentServiceImpl -> PaymentRepository: findById(id)
    activate PaymentRepository
    PaymentRepository -> PaymentServiceImpl: Optional<Payment>
    deactivate PaymentRepository
    PaymentServiceImpl -> PaymentController: Optional<Payment>
    deactivate PaymentServiceImpl
    PaymentController -> User: Payment (if found)
else Payment not found
    PaymentController --> User: Payment Not Found
end
deactivate PaymentController

User -> PaymentController: deletePayment(id)
activate PaymentController
PaymentController -> PaymentServiceImpl: deletePayment(id)
activate PaymentServiceImpl
PaymentServiceImpl -> PaymentRepository: findById(id)
activate PaymentRepository
alt Payment exists
    PaymentRepository -> PaymentServiceImpl: Optional<Payment>
    deactivate PaymentRepository
    PaymentServiceImpl -> PaymentServiceImpl: revertAvailability(slotId)
    PaymentServiceImpl -> ParkingSlotService: updateSlotAvailabilityTrue(slotId)
    activate ParkingSlotService
    ParkingSlotService -> PaymentServiceImpl: Slot updated
    deactivate ParkingSlotService

    PaymentServiceImpl -> PaymentRepository: deleteById(id)
    activate PaymentRepository
    PaymentRepository -> PaymentServiceImpl: Payment deleted
    deactivate PaymentRepository

    PaymentServiceImpl -> PaymentController: Payment deleted
else Payment not found
    PaymentServiceImpl --> PaymentController: Payment Not Found
end
deactivate PaymentServiceImpl
PaymentController -> User: Payment deleted or Payment Not Found
deactivate PaymentController
@enduml